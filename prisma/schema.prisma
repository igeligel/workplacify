// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum WorkplacifyPreference {
  DESK_BOOKING
  WORKPLACE_ANALYTICS
  JOIN_ORGANIZATION

  @@map("workplacify_preference")
}

model OnboardingSelection {
  id                     String                  @id @default(cuid())
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  user                   User                    @relation(fields: [userId], references: [id])
  userId                 String                  @map("user_id")
  workplacifyPreferences WorkplacifyPreference[] @map("workplacify_preferences")
  temporaryInviteCode    String?                 @map("temporary_invite_code")
  submitted              Boolean                 @default(false)

  @@map("onboarding_selection")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  members     User[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  office      Office[]
  inviteCode  String   @unique @default(uuid()) @map("invite_code")

  @@map("organization")
}

model Office {
  id              String         @id @default(cuid())
  name            String
  description     String?
  longitude       Float?
  latitude        Float?
  timezone        String         @default("Etc/GMT")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  organization    Organization?  @relation(fields: [organizationId], references: [id])
  organizationId  String?        @map("organization_id")
  floors          Floor[]
  user            User[]
  officeSetting   OfficeSetting? @relation(fields: [officeSettingId], references: [id])
  officeSettingId String?        @map("office_setting_id")

  @@map("office")
}

model OfficeSetting {
  id                             String                        @id @default(cuid())
  allowSchedulingInThePast       Boolean                       @default(false) @map("allow_scheduling_in_the_past")
  durationSchedulingFuture       Int?                          @map("duration_scheduling_future")
  officeSettingWeekdaysAllowed   OfficeSettingWeekdaysAllowed? @relation(fields: [officeSettingWeekdaysAllowedId], references: [id])
  officeSettingWeekdaysAllowedId String?                       @map("office_setting_weekdays_allowed_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Office    Office[]

  @@map("office_setting")
}

model OfficeSettingWeekdaysAllowed {
  id             String          @id @default(cuid())
  allowMonday    Boolean         @default(true) @map("allow_monday")
  allowTuesday   Boolean         @default(true) @map("allow_tuesday")
  allowWednesday Boolean         @default(true) @map("allow_wednesday")
  allowThursday  Boolean         @default(true) @map("allow_thursday")
  allowFriday    Boolean         @default(true) @map("allow_friday")
  allowSaturday  Boolean         @default(true) @map("allow_saturday")
  allowSunday    Boolean         @default(true) @map("allow_sunday")
  OfficeSetting  OfficeSetting[]

  @@map("office_setting_weekdays_allowed")
}

model Floor {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  // String to save the URL of the floor plan image
  floorPlan   String?       @map("floor_plan")
  meetingRoom MeetingRoom[]
  officeRoom  OfficeRoom[]
  office      Office?       @relation(fields: [officeId], references: [id])
  officeId    String?       @map("office_id")
  desks       Desk[]

  @@map("floor")
}

model MeetingRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  floor       Floor    @relation(fields: [floorId], references: [id])
  floorId     String   @map("floor_id")

  @@map("meeting_room")
}

model OfficeRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  floor       Floor    @relation(fields: [floorId], references: [id])
  floorId     String   @map("floor_id")

  @@map("office_room")
}

model DeskSchedule {
  id        String    @id @default(cuid())
  desk      Desk      @relation(fields: [deskId], references: [id])
  deskId    String    @map("desk_id")
  date      DateTime?
  timezone  String    @default("Etc/GMT")
  wholeDay  Boolean   @default(false) @map("whole_day")
  startTime DateTime? @map("start_time")
  endTime   DateTime? @map("end_time")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @map("user_id")

  @@map("desk_schedule")
}

model Desk {
  id           String         @id @default(cuid())
  publicDeskId String         @map("public_desk_id")
  name         String?
  description  String?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  floor        Floor          @relation(fields: [floorId], references: [id])
  floorId      String         @map("floor_id")
  x            Float
  y            Float
  deskSchedule DeskSchedule[]

  @@map("desk")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  extExpiresIn      Int?    @map("ext_expires_in")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

enum UserRole {
  ADMIN
  MEMBER

  @@map("user_role")
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?             @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]
  organization        Organization?         @relation(fields: [organizationId], references: [id])
  organizationId      String?               @map("organization_id")
  userRole            UserRole              @default(MEMBER) @map("user_role")
  onboardingSelection OnboardingSelection[]
  currentOffice       Office?               @relation(fields: [currentOfficeId], references: [id])
  currentOfficeId     String?               @map("current_office_id")
  deskSchedule        DeskSchedule[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
